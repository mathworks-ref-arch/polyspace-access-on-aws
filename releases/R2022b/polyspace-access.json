{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS Cloud Formation Template for MathWorks' Polyspace Access R2022b U5 from MathWorks AMI",
  "Mappings": {
    "RegionMap": {
      "eu-west-1": {
        "AMI": "ami-0ed92aaa098938406"
      },
      "us-east-1": {
        "AMI": "ami-0df1da744671b9e0a"
      },
      "ap-south-1": {
        "AMI": "ami-0db3159c080720bcf"
      }
    },
    "Constants": {
      "InstanceValues": {
        "BootScriptLocation": "/opt/polyspace-access/setup.sh"
      }
    }
  },
  "Resources": {
    "AccessSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "Allow remote access for users and admins",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "9443",
            "ToPort": "9443",
            "CidrIp": {
              "Ref": "UserIPAddress"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "AdminIPAddress"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "AccessSecurityGroupInternalTrafficRule": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "DependsOn": "AccessSecurityGroup",
      "Properties": {
        "GroupId": {
          "Ref": "AccessSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "1",
        "ToPort": "65535",
        "SourceSecurityGroupId": {
          "Ref": "AccessSecurityGroup"
        }
      }
    },
    "AccessnodeInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "s3-access-policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:ListBucket"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                                "Fn::GetAtt": [
                              "S3Bucket",
                                  "Arn"
                            ]
                          },
                          "/*"
                        ]
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "S3Bucket",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "awscli-policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeInstances",
                    "ec2:DescribeAddresses"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "AccessnodeInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "AccessnodeInstanceRole"
          }
        ]
      }
    },
    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      }
    },
    "S3DeleteBucketsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "lambda_basic_execution",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ]
            }
          },
          {
            "PolicyName": "s3-delete-bucket",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:DeleteBucket",
                    "s3:ListBucket",
                    "s3:ListBucketVersions"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "S3Bucket",
                      "Arn"
                    ]
                  }
                }
              ]
            }
          },
          {
            "PolicyName": "s3-delete-object",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:DeleteObject",
                    "s3:DeleteObjectVersion"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "/",
                      [
                        {
                          "Fn::GetAtt": [
                            "S3Bucket",
                            "Arn"
                          ]
                        },
                        "*"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "EmptyBucketsLambda": {
      "DependsOn": "S3Bucket",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "import cfnresponse",
                "import boto3",
                "def handler(event, context):",
                "    responseData = {}",
                "    ResponseStatus = cfnresponse.SUCCESS",
                "    print('Launched empty bucket lambda. Event={}'.format(event))",
                "    bucketname = event['ResourceProperties']['BucketName']",
                "    if event['RequestType'] == 'Create':",
                "        responseData['Message'] = 'Resource creation successful!'",
                "    elif event['RequestType'] == 'Update':",
                "        responseData['Message'] = 'Resource update successful!'",
                "    elif event['RequestType'] == 'Delete':",
                "        # Need to empty the S3 bucket before it is deleted",
                "        s3 = boto3.resource('s3')",
                "        bucket = s3.Bucket(bucketname)",
                "        bucket.objects.all().delete()",
                "        bucket.object_versions.all().delete()",
                "        responseData['Message'] = 'Resource deletion successful!'",
                "    cfnresponse.send(event, context, ResponseStatus, responseData)"
              ]
            ]
          }
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "S3DeleteBucketsRole",
            "Arn"
          ]
        },
        "Runtime": "python3.8"
      },
      "Type": "AWS::Lambda::Function"
    },
    "EmptyBuckets": {
      "Type": "Custom::LambdaDependency",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "EmptyBucketsLambda",
            "Arn"
          ]
        },
        "BucketName": {
          "Ref": "S3Bucket"
        }
      }
    },
    "ElasticIp": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-EIP"
                ]
              ]
            }
          }
        ]
      }
    },
    "ElasticIpAssoc": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": { "Fn::GetAtt" : [ "ElasticIp", "AllocationId" ] },
        "InstanceId": { "Ref": "Accessnode"}
      }
    },
    "Accessnode": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "AvailabilityZone": { "Ref": "AvailabilityZone" },
        "InstanceType": {
          "Ref": "AccessnodeInstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "AccessnodeInstanceProfile"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeType": "io1",
              "VolumeSize": "40",
              "Iops": "1000",
              "DeleteOnTermination":"true",
              "Encrypted": "false"
            }
          }
        ],
        "SecurityGroupIds": [
          {
            "Ref": "AccessSecurityGroup"
          },
          {
            "Fn::If": [
              "AddSG",
              {
                "Ref": "AdditionalSecurityGroup"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          {
            "Fn::If": [
              "CreateLicenseManager",
              {
                "Fn::GetAtt" : [ "NestedLicenseManager", "Outputs.SecurityGroup" ]
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "SubnetId": {
          "Ref": "Subnet"
        },
        "KeyName": {
          "Ref": "SSHKeyName"
        },
        "ImageId": {
          "Fn::If": [
            "OverrideAmi",
            {
              "Ref": "InstanceAmiCustom"
            },
            {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "AMI"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-Accessnode"
                ]
              ]
            }
          },
          {
            "Key": "NodeType",
            "Value": "Polyspace Access"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/usr/bin/env bash\n",
                "# Copyright 2011-2022 The MathWorks, Inc.\n",
                {
                  "Fn::Sub": "export S3_BUCKET=\"s3://${S3Bucket}\"\n"
                },
                {
                  "Fn::Sub": "export POLYSPACE_CREATE_USERS=\"${CreateUsers}\"\n"
                },
                {
                  "Fn::Sub": [
                    "export POLYSPACE_LICENSE_MANAGER=\"${PolyLicenseManager}\"\n",
                    {
                      "PolyLicenseManager" : {
                        "Fn::If": [
                            "CreateLicenseManager",
                            {
                              "Fn::Join": [
                                "",
                                [
                                  "27000@",
                                  {
                                    "Fn::GetAtt" : [ "NestedLicenseManager", "Outputs.ServerPrivateDNS" ]
                                  }
                                ]
                              ]
                            },
                            {
                              "Ref": "ExistingLicenseManagerString"
                            }
                          ]
                      }
                    }
                  ]
                },
                "# launch init script\n",
                {
                  "Fn::FindInMap": ["Constants", "InstanceValues", "BootScriptLocation"]
                },
                "\n"
              ]
            ]
          }
        },
        "Volumes": [
          {
            "Device": "/dev/sdh",
            "VolumeId": {
              "Ref": "DatabaseVolume"
            }
          }
        ]
      }
    },
    "DatabaseVolume": {
      "Type": "AWS::EC2::Volume",
      "Properties": {
        "Size": {
          "Ref": "NewDatabaseVolumeSize"
        },
        "Encrypted": "true",
        "AvailabilityZone": { "Ref": "AvailabilityZone" },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-DatabaseVolume"
                ]
              ]
            }
          }
        ]
      }
    },
    "BackupRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "CreateBackupPlan",
      "Properties": {
        "RoleName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-BackupRole"
            ]
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "backup.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup"
        ]
      }
    },
    "BackupVault": {
      "Type": "AWS::Backup::BackupVault",
      "Condition": "CreateBackupPlan",
      "Properties": {
        "BackupVaultName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-BackupVault"
            ]
          ]
        }
      }
    },
    "BackupPlan": {
      "Type": "AWS::Backup::BackupPlan",
      "Condition": "CreateBackupPlan",
      "Properties": {
        "BackupPlan": {
          "BackupPlanName": {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "AWS::StackName"
                },
                "-BackupPlan"
              ]
            ]
          },
          "BackupPlanRule": [
            {
              "RuleName": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "AWS::StackName"
                    },
                    "-WeekyBackupRule"
                  ]
                ]
              },
              "TargetBackupVault": {
                "Ref": "BackupVault"
              },
              "Lifecycle": {
                "DeleteAfterDays": 7
              },
              "ScheduleExpression": "cron(0 20 ? * SAT *)"
            }
          ]
        }
      }
    },
    "BackupSelection": {
      "Type": "AWS::Backup::BackupSelection",
      "Condition": "CreateBackupPlan",
      "Properties": {
        "BackupPlanId": {
            "Ref": "BackupPlan"
        },
        "BackupSelection": {
          "SelectionName": {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "AWS::StackName"
                },
                "-BackupSelection"
              ]
            ]
          },
          "IamRoleArn": {
            "Fn::GetAtt": [
              "BackupRole",
              "Arn"
            ]
          },
          "ListOfTags": [
            {
              "ConditionType": "STRINGEQUALS",
              "ConditionKey": "Name",
              "ConditionValue": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "AWS::StackName"
                    },
                    "-DatabaseVolume"
                  ]
                ]
              }
            }
          ]
        }
      }
    },
    "NestedLicenseManager" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Condition": "CreateLicenseManager",
      "DeletionPolicy": "Delete",
      "Properties" : {
        "TemplateURL" : "https://network-license-manager-for-matlab-on-aws.s3.amazonaws.com/R2022b/license-manager-template.json",
        "Parameters" : {
          "ServerInstanceType" : "t1.micro",
          "VPC": { "Ref": "VPC" },
          "Subnet": { "Ref": "Subnet" },
          "ClientIPAddress": { "Ref": "AdminIPAddress" },
          "SSHKeyName": { "Ref": "SSHKeyName" },
          "Password": { "Ref": "NewLicenseManagerPassword" },
          "ConfirmPassword": { "Ref": "NewLicenseManagerConfirmPassword" }
        },
        "Tags": [
          {
            "Key" : "Polyspace_Users",
            "Value" : { "Ref": "CreateUsers"}
          }
        ]
      }
    }
  },
  "Parameters": {
    "AvailabilityZone": {
      "Description": "The EC2 instance and the data volume are placed in the specified availability zone within your region",
      "Type": "AWS::EC2::AvailabilityZone::Name",
      "ConstraintDescription": "Availability zone must not be empty",
      "AllowedPattern": ".+"
    },
    "VPC": {
      "Description": "ID of an existing VPC in which to deploy this stack",
      "Type": "AWS::EC2::VPC::Id",
      "ConstraintDescription": "Must be the ID of an existing VPC.",
      "AllowedPattern": ".+"
    },
    "Subnet": {
      "Description": "ID of an existing subnet for the EC2 instances",
      "Type": "AWS::EC2::Subnet::Id",
      "ConstraintDescription": "Must be the ID of an existing subnet within the chosen VPC.",
      "AllowedPattern": ".+"
    },
    "AdminIPAddress": {
      "Description": "The IP address range that will be allowed to manage the Polyspace Access service (start, stop, SSH) from outside of the VPC. This field should be formatted as <ip_address>/<mask>. E.g. 10.0.0.1/32. This is the public IP address which can be found by searching for 'what is my ip address' on the web. The mask determines the number of IP addresses to include. A mask of 32 is a single IP address. This calculator can be used to build a specific range: https://www.ipaddressguide.com/cidr. You may need to contact your IT administrator to determine which address is appropriate.",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "UserIPAddress": {
      "Description": "The IP address range that will be allowed to use the Polyspace Access web interface from outside of the VPC. This field should be formatted as <ip_address>/<mask>. E.g. 10.0.0.1/32. This is the public IP address which can be found by searching for 'what is my ip address' on the web. The mask determines the number of IP addresses to include. A mask of 32 is a single IP address. This calculator can be used to build a specific range: https://www.ipaddressguide.com/cidr. You may need to contact your IT administrator to determine which address is appropriate.",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "SSHKeyName": {
      "Description": "The name of an existing EC2 KeyPair to allow SSH access to all the instances. See https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html for details on creating these.",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair.",
      "AllowedPattern": ".+"
    },
    "AccessnodeInstanceType": {
      "Description": "The AWS instance type to use for the Polyspace Access server. We recommend 't3a.xlarge' for small and medium-sized usage scenarios, and 't3a.2xlarge' for large-scale production use. See https://aws.amazon.com/ec2/instance-types for a list of instance types. Must be available in the Availability Zone of the subnet",
      "Default": "t3a.xlarge",
      "Type": "String",
      "MinLength": 1,
      "ConstraintDescription": "The Access node instance type must be specified"
    },
    "InstanceAmiCustom": {
      "Default": "",
      "Description": "Custom Amazon Machine Image (AMI) in the target region",
      "Type": "String",
      "AllowedPattern": "(ami-[a-f0-9]+)?",
      "ConstraintDescription": "InstanceAmiCustom must be empty or a valid id"
    },
    "NewDatabaseVolumeSize": {
      "Description": "On initial deployment, a blank volume is created with the specified size in GB. Analysis data and review data will be stored on this volume and should therefore have enough capacity to store the expected amount of data.",
      "Type": "Number",
      "Default": "100",
      "MinValue": "50"
    },
    "BackupEnabled": {
      "Description": "If set to yes, the AWS Backup service is used to create weekly snapshots of the EBS volume. This is strongly recommended for production use. Note that this may incur cost for snapshot storage. Snapshots are created with a retention policy of one week.",
      "Type": "String",
      "AllowedValues": [
        "yes",
        "no"
      ],
      "Default": "no"
    },
    "NewLicenseManager": {
      "AllowedValues": [
        "yes",
        "no"
      ],
      "Default": "yes",
      "Description": "To create a new license server with a license manager, set this parameter to yes. If you already have a license manager, set this to no and specify license manager string below.",
      "Type": "String"
    },
    "NewLicenseManagerPassword": {
      "NoEcho": "true",
      "Description": "If a new license manager shall be created, then you must specify a password for user 'manager' here. This is used to login to the Network License Manager dashboard",
      "Type": "String",
      "ConstraintDescription": "",
      "Default": ""
    },
    "NewLicenseManagerConfirmPassword": {
      "NoEcho": "true",
      "Description": "Repeat the same password as above",
      "Type": "String",
      "ConstraintDescription": "",
      "Default": ""
    },
    "CreateUsers": {
      "Description": "The following usernames will be created (alpha-numeric, separated by spaces, 'admin' required)",
      "Type": "String",
      "AllowedPattern": "admin(\\s(\\w|\\.)+)*\\s*",
      "ConstraintDescription": "List of users must be alpha-numeric identifiers, separated by spaces AND first user must be 'admin'",
      "Default": "admin user1 user2 user3 user4"
    },
    "ExistingLicenseManagerString": {
      "Description": "If an existing License Manager is used, provide string in the form <port>@<hostname>. License manager must be accessible from the specified VPC and subnet. If the Network License Manager was deployed using the reference architecture, this can be achieved by specifying the security group of that deployment as the AdditionalSecurityGroup parameter. Do not use IP address here, but a proper hostname.",
      "Type": "String",
      "AllowedPattern": "([0-9]+@[a-zA-Z0-9.\\-]+)?",
      "ConstraintDescription": "Must be empty or in the form <port>@<hostname>"
    },
    "AdditionalSecurityGroup": {
      "Description": "If an existing License Manager is used, provide the ID of its security group here.",
      "Type": "String",
      "Default": "",
      "AllowedPattern": "(sg-[a-f0-9]+)?",
      "ConstraintDescription": "AdditionalSecurityGroup must be empty or a valid id"
    }
  },
  "Rules": {
    "SubnetInVPC": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Equals": [
              {
                "Fn::ValueOf": [ "Subnet", "VpcId" ]
              },
              {
                "Ref": "VPC"
              }
            ]
          },
          "AssertDescription": "Subnet must exist in the VPC you have selected."
        }
      ]
    },
    "SubnetInAZ": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Equals": [
              {
                "Fn::ValueOf": [ "Subnet", "AvailabilityZone"]
              },
              {
                "Ref": "AvailabilityZone"
              }
            ]
          },
          "AssertDescription": "Subnet must exist in the availability zone you have selected."
        }
      ]
    },
    "nonemptyPassword": {
      "RuleCondition": {
        "Fn::Equals": [
          {
            "Ref": "NewLicenseManager"
          },
          "yes"
        ]
      },
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Equals": [
                  {
                    "Ref": "NewLicenseManagerPassword"
                  },
                  ""
                ]
              }
            ]
          },
          "AssertDescription": "License manager password must not be empty"
        }
      ]
    },
    "matchPasswords": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Equals": [
              {
                "Ref": "NewLicenseManagerPassword"
              },
              {
                "Ref": "NewLicenseManagerConfirmPassword"
              }
            ]
          },
          "AssertDescription": "Passwords do not match"
        }
      ]
    }
  },
  "Conditions": {
    "CreateLicenseManager": {
      "Fn::Equals": [
        {
          "Ref": "NewLicenseManager"
        },
        "yes"
      ]
    },
    "OverrideAmi": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "InstanceAmiCustom"
            },
            ""
          ]
        }
      ]
    },
    "AddSG": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "AdditionalSecurityGroup"
            },
            ""
          ]
        }
      ]
    },
    "CreateBackupPlan": {
      "Fn::Equals": [
        {
          "Ref": "BackupEnabled"
        },
        "yes"
      ]
    }
  },
  "Outputs": {
    "AccessnodeInstanceId": {
      "Description": "Instance ID of the Accessnode",
      "Value": {
        "Ref": "Accessnode"
      }
    },
    "AccessURL": {
      "Description": "Public URL of the newly created EC2 instance (for users)",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "Accessnode",
                "PublicDnsName"
              ]
            },
            ":9443"
          ]
        ]
      }
    },
    "AccessURLAdmin": {
      "Description": "Public URL of the newly created EC2 instance (for admins)",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "Accessnode",
                "PublicDnsName"
              ]
            },
            ":9443/admin"
          ]
        ]
      }
    },
    "S3Bucket": {
      "Value": {
        "Ref": "S3Bucket"
      },
      "Description": "The name of the S3 bucket the profile has been saved to (for admins)"
    },
    "BucketURL": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://s3.console.aws.amazon.com/s3/buckets/",
            {
              "Ref": "S3Bucket"
            },
            "/"
          ]
        ]
      },
      "Description": "The URL of the S3 bucket in the AWS console that contains user logins and certificates (for admins)"
    },
    "LicenseManagerURL" : {
      "Condition": "CreateLicenseManager",
      "Value" : { "Fn::GetAtt" : [ "NestedLicenseManager", "Outputs.ServerAddress" ] },
      "Description": "The dashboard of the newly created license manager"
    }
  },
  "Metadata": {
    "StackType": "PolyspaceAccessFromAmi",
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Amazon EC2 Configuration"
          },
          "Parameters": [
            "AccessnodeInstanceType",
            "NewDatabaseVolumeSize",
            "BackupEnabled",
            "SSHKeyName"
          ]
        },
        {
          "Label": {
            "default": "Network Configuration"
          },
          "Parameters": [
            "AvailabilityZone",
            "VPC",
            "Subnet",
            "AdminIPAddress",
            "UserIPAddress",
            "AdditionalSecurityGroup"
          ]
        },
        {
          "Label": {
            "default": "Polyspace Service Configuration"
          },
          "Parameters": [
            "CreateUsers"
          ]
        },
        {
          "Label": {
            "default": "Polyspace License Configuration"
          },
          "Parameters": [
            "NewLicenseManager",
            "NewLicenseManagerPassword",
            "NewLicenseManagerConfirmPassword",
            "ExistingLicenseManagerString"
          ]
        },
        {
          "Label": {
            "default": "Expert settings"
          },
          "Parameters": [
            "InstanceAmiCustom"
          ]
        }
      ],
      "ParameterLabels": {
        "NewDatabaseVolumeSize": {
          "default": "Size of database volume (GB)"
        },
        "BackupEnabled": {
          "default": "Backup data volume automatically"
        },
        "AccessnodeInstanceType": {
          "default": "Instance type"
        },
        "SSHKeyName": {
          "default": "Name of SSH keypair"
        },
        "AdminIPAddress": {
          "default": "CIDR IP address range of admin user"
        },
        "UserIPAddress": {
          "default": "CIDR IP address range of end users"
        },
        "VPC": {
          "default": "VPC to deploy this stack to"
        },
        "AvailabilityZone": {
          "default": "Availability Zone to deploy this stack to"
        },
        "Subnet": {
          "default": "Subnet for Polyspace Access instance"
        },
        "CreateUsers": {
          "default": "Users to create"
        },
        "NewLicenseManager": {
          "default": "Create license manager?"
        },
        "NewLicenseManagerPassword": {
          "default": "New license manager password"
        },
        "NewLicenseManagerConfirmPassword": {
          "default": "Confirm new license manager password"
        },
        "ExistingLicenseManagerString": {
          "default": "Existing license manager connection string"
        },
        "AdditionalSecurityGroup": {
          "default": "Additional security group to place instances in"
        },
        "InstanceAmiCustom": {
          "default": "Use a different image"
        }
      }
    }
  }
}
